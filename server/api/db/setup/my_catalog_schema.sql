
-- 1) FIRST WE NEED TO CREATE
-- A ROLE (USER) NAMED webapp_catalog
-- AND A DATABASE NAMED my_catalog WITH ALL PRIVILEGES

-- IN THE COMMAND LINE:
-- Psql postgres
-- postgres=# \du
-- postgres=# CREATE ROLE webapp_catalog WITH LOGIN PASSWORD 'webappversion1';
-- postgres=# ALTER ROLE webapp_catalog CREATEDB;
-- postgres-# \q
-- psql postgres -U webapp_catalog
-- postgres=> CREATE DATABASE my_catalog WITH OWNER "webapp_catalog" ENCODING 'UTF8' LC_COLLATE = 'en_US.UTF-8' LC_CTYPE = 'en_US.UTF-8';
-- postgres=> GRANT ALL PRIVILEGES ON DATABASE my_catalog TO webapp_catalog;
-- postgres-# \q
-- psql my_catalog -U postgres
-- DROP SCHEMA IF EXISTS public ;
-- postgres-# \q
-- psql my_catalog -U webapp_catalog;
-- postgres=> \list

-- 2) CONNECTING TO DATABASE VIA PGADMIN,
-- USING THE USER/PASSWORD CREATED ABOVE
-- RUN THE SCRIPT BELLOW IN THE QUERY TOOL

-- 3) IN CASE SOMETHING GOES WRONG WITH THE SCRIPT OR COMMANDS,
-- YOU CAN DROP THE SCHEMA TO RETRY
-- DROP SCHEMA IF EXISTS public CASCADE;

-- note: to generate this initial script I used MySQLWorkbench to:
-- 1. generate the schema in the visual tool.
-- 2. export script in MySQL
-- 3. use to convert the script to psql: http://www.sqlines.com/online
-- 4. resolve incompatibilities in command like DROP IF NOT EXISTS, DEFAULT COLLATION, etc that are not supported in postgreSQL 10.




-- COPY AND PASTE THIS WHOLE FILE IN THE QUERY TOOL, AND RUN IT.

-- MySQL Script generated by MySQL Workbench
-- Mon Jun  8 18:14:01 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

/* SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0; */
/* SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0; */
/* SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES'; */

-- -----------------------------------------------------
-- Schema public
-- -----------------------------------------------------
-- Public schema for catalog database
-- DROP SCHEMA IF EXISTS public ;

-- -----------------------------------------------------
-- Schema public
--
-- Public schema for catalog database
-- -----------------------------------------------------
CREATE SCHEMA public AUTHORIZATION webapp_catalog;


-- -----------------------------------------------------
-- Table `public`.`clients`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.clients ;

CREATE SEQUENCE public.clients_seq;

CREATE TABLE public.clients (
  client_id INT NOT NULL DEFAULT NEXTVAL ('public.clients_seq'),
  name VARCHAR(255) NOT NULL,
  slug VARCHAR(255) NOT NULL,
  address VARCHAR(255) NULL,
  additional_comments VARCHAR(255) NULL,
  description TEXT NULL,
  date_created TIMESTAMP(0) NOT NULL DEFAULT now(),
  date_modified TIMESTAMP(0) NULL,
  PRIMARY KEY (client_id))
;

ALTER SEQUENCE public.clients_seq RESTART WITH 1;

-- -----------------------------------------------------
-- Table `public`.`roles`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.roles ;

CREATE SEQUENCE public.roles_seq;

CREATE TABLE public.roles (
  role_id INT NOT NULL DEFAULT NEXTVAL ('public.roles_seq'),
  name VARCHAR(45) NOT NULL,
  PRIMARY KEY (role_id))
;

ALTER SEQUENCE public.roles_seq RESTART WITH 4;


-- -----------------------------------------------------
-- Table `public`.`users`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.users ;

CREATE SEQUENCE public.users_seq;

CREATE TABLE public.users (
  user_id INT NOT NULL DEFAULT NEXTVAL ('public.users_seq'),
  role_id INT NOT NULL,
  email VARCHAR(100) NOT NULL,
  password VARCHAR(45) NOT NULL,
  salt VARCHAR(45) NULL,
  session_token VARCHAR(45) NULL,
  date_created TIMESTAMP(0) NOT NULL DEFAULT now(),
  date_modified TIMESTAMP(0) NULL,
  PRIMARY KEY (user_id)
 ,
  CONSTRAINT user_role
    FOREIGN KEY (role_id)
    REFERENCES public.roles (role_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.users_seq RESTART WITH 1;

CREATE INDEX user_role_idx ON public.users (role_id ASC);


-- -----------------------------------------------------
-- Table `public`.`business_associates`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.business_associates ;

CREATE SEQUENCE public.business_associates_seq;

CREATE TABLE public.business_associates (
  business_associate_id INT NOT NULL DEFAULT NEXTVAL ('public.business_associates_seq'),
  user_id INT NOT NULL,
  client_id INT NOT NULL,
  PRIMARY KEY (business_associate_id)
 ,
  CONSTRAINT associate_user
    FOREIGN KEY (user_id)
    REFERENCES public.users (user_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT associate_client
    FOREIGN KEY (client_id)
    REFERENCES public.clients (client_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.business_associates_seq RESTART WITH 1;
CREATE INDEX associate_user_idx ON public.business_associates (user_id ASC);
CREATE INDEX associate_client_idx ON public.business_associates (client_id ASC);


-- -----------------------------------------------------
-- Table `public`.`statuses`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.statuses ;

CREATE SEQUENCE public.statuses_seq;

CREATE TABLE public.statuses (
  status_id INT NOT NULL DEFAULT NEXTVAL ('public.statuses_seq'),
  name VARCHAR(45) NOT NULL,
  PRIMARY KEY (status_id))
;

ALTER SEQUENCE public.statuses_seq RESTART WITH 11;


-- -----------------------------------------------------
-- Table `public`.`orders`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.orders ;

CREATE SEQUENCE public.orders_seq;

CREATE TABLE public.orders (
  order_id INT NOT NULL DEFAULT NEXTVAL ('public.orders_seq'),
  client_id INT NOT NULL,
  business_associate_id INT NULL,
  total_amount DECIMAL(2) NULL,
  status_id INT NULL,
  date_creeted TIMESTAMP(0) NOT NULL DEFAULT now(),
  date_modified TIMESTAMP(0) NULL,
  PRIMARY KEY (order_id)
 ,
  CONSTRAINT order_client
    FOREIGN KEY (client_id)
    REFERENCES public.clients (client_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT order_associate
    FOREIGN KEY (business_associate_id)
    REFERENCES public.business_associates (business_associate_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT order_status
    FOREIGN KEY (status_id)
    REFERENCES public.statuses (status_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.orders_seq RESTART WITH 1;

CREATE INDEX client_order_idx ON public.orders (client_id ASC);
CREATE INDEX order_associate_idx ON public.orders (business_associate_id ASC);
CREATE INDEX order_status_idx ON public.orders (status_id ASC);


-- -----------------------------------------------------
-- Table `public`.`payment_methods`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.payment_methods ;

CREATE SEQUENCE public.payment_methods_seq;

CREATE TABLE public.payment_methods (
  payment_method_id INT NOT NULL DEFAULT NEXTVAL ('public.payment_methods_seq'),
  name VARCHAR(45) NULL,
  PRIMARY KEY (payment_method_id))
;

ALTER SEQUENCE public.payment_methods_seq RESTART WITH 1;

-- -----------------------------------------------------
-- Table `public`.`delivery_orders`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.delivery_orders ;

CREATE SEQUENCE public.delivery_orders_seq;

CREATE TABLE public.delivery_orders (
  delivery_order_id INT NOT NULL DEFAULT NEXTVAL ('public.delivery_orders_seq'),
  order_id INT NOT NULL,
  delivery_address VARCHAR(255) NULL,
  additional_comments VARCHAR(255) NULL,
  payment_method_id INT NOT NULL DEFAULT 1,
  status_id INT NOT NULL,
  date_created TIMESTAMP(0) NOT NULL DEFAULT now(),
  date_modified TIMESTAMP(0) NULL,
  PRIMARY KEY (delivery_order_id)
 ,
  CONSTRAINT delivery_payment
    FOREIGN KEY (payment_method_id)
    REFERENCES public.payment_methods (payment_method_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT delivery_order
    FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT deliver_status
    FOREIGN KEY (status_id)
    REFERENCES public.statuses (status_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.delivery_orders_seq RESTART WITH 1;

CREATE INDEX delivery_payment_idx ON public.delivery_orders (payment_method_id ASC);
CREATE INDEX delivery_order_idx ON public.delivery_orders (order_id ASC);
CREATE INDEX deliver_status_idx ON public.delivery_orders (status_id ASC);


-- -----------------------------------------------------
-- Table `public`.`product_categories`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.product_categories ;

CREATE SEQUENCE public.product_categories_seq;

CREATE TABLE public.product_categories (
  product_category_id INT NOT NULL DEFAULT NEXTVAL ('public.product_categories_seq'),
  name VARCHAR(255) NOT NULL,
  description VARCHAR(255) NULL,
  client_id INT NOT NULL,
  PRIMARY KEY (product_category_id)
 ,
  CONSTRAINT categories_client
    FOREIGN KEY (client_id)
    REFERENCES public.clients (client_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.product_categories_seq RESTART WITH 1;

CREATE INDEX categories_client_idx ON public.product_categories (client_id ASC);


-- -----------------------------------------------------
-- Table `public`.`products`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.products ;

CREATE SEQUENCE public.products_seq;

CREATE TABLE public.products (
  product_id INT NOT NULL DEFAULT NEXTVAL ('public.products_seq'),
  product_name VARCHAR(255) NULL,
  price DECIMAL(2) NULL,
  stock INT NULL,
  description VARCHAR(255) NULL,
  product_category_id INT NULL,
  PRIMARY KEY (product_id)
 ,
  CONSTRAINT product_category
    FOREIGN KEY (product_category_id)
    REFERENCES public.product_categories (product_category_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.products_seq RESTART WITH 1;

CREATE INDEX product_category_idx ON public.products (product_category_id ASC);


-- -----------------------------------------------------
-- Table `public`.`order_details`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.order_details ;

CREATE SEQUENCE public.order_details_seq;

CREATE TABLE public.order_details (
  order_detail_id INT NOT NULL DEFAULT NEXTVAL ('public.order_details_seq'),
  product_id INT NULL,
  quantity INT NULL,
  order_id INT NULL,
  PRIMARY KEY (order_detail_id)
 ,
  CONSTRAINT details_order
    FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT details_product
    FOREIGN KEY (product_id)
    REFERENCES public.products (product_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.order_details_seq RESTART WITH 1;

CREATE INDEX order_idx ON public.order_details (order_id ASC);
CREATE INDEX details_product_idx ON public.order_details (product_id ASC);


-- -----------------------------------------------------
-- Table `public`.`client_settings`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.client_settings ;

CREATE SEQUENCE public.client_settings_seq;

CREATE TABLE public.client_settings (
  client_setting_id INT NOT NULL DEFAULT NEXTVAL ('public.client_settings_seq'),
  client_id INT NOT NULL,
  business_associate_id INT NULL,
  logo VARCHAR(255) NULL,
  payment_options INT NOT NULL DEFAULT 1,
  delivery_availability TEXT NULL,
  PRIMARY KEY (client_setting_id)
 ,
  CONSTRAINT settings_client
    FOREIGN KEY (client_id)
    REFERENCES public.clients (client_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT settings_payment
    FOREIGN KEY (payment_options)
    REFERENCES public.payment_methods (payment_method_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT settings_associate
    FOREIGN KEY (business_associate_id)
    REFERENCES public.business_associates (business_associate_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.client_settings_seq RESTART WITH 1;

CREATE INDEX settings_client_idx ON public.client_settings (client_id ASC);
CREATE INDEX settings_payment_idx ON public.client_settings (payment_options ASC);
CREATE INDEX settings_associate_idx ON public.client_settings (business_associate_id ASC);


-- -----------------------------------------------------
-- Table `public`.`products_images`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.products_images ;

CREATE SEQUENCE public.products_images_seq;

CREATE TABLE public.products_images (
  product_image_id INT NOT NULL DEFAULT NEXTVAL ('public.products_images_seq'),
  url VARCHAR(255) NULL,
  product_id INT NULL,
  PRIMARY KEY (product_image_id)
 ,
  CONSTRAINT image_product
    FOREIGN KEY (product_id)
    REFERENCES public.products (product_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.products_images_seq RESTART WITH 1;

CREATE INDEX image_product_idx ON public.products_images (product_id ASC);


-- -----------------------------------------------------
-- Table `public`.`customers`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.customers ;

CREATE SEQUENCE public.customers_seq;

CREATE TABLE public.customers (
  customer_id INT NOT NULL DEFAULT NEXTVAL ('public.customers_seq'),
  first_name VARCHAR(100) NULL,
  last_name VARCHAR(100) NULL,
  telephone VARCHAR(45) NULL,
  telephone2 VARCHAR(45) NULL,
  email_address VARCHAR(100) NULL,
  user_id INT NULL,
  PRIMARY KEY (customer_id))
;

ALTER SEQUENCE public.customers_seq RESTART WITH 1;


-- -----------------------------------------------------
-- Table `public`.`order_customers_map`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.order_customers_map ;

CREATE SEQUENCE public.order_customers_map_seq;

CREATE TABLE public.order_customers_map (
  order_customer_map_id INT NOT NULL DEFAULT NEXTVAL ('public.order_customers_map_seq'),
  order_id INT NOT NULL,
  customer_id INT NOT NULL,
  PRIMARY KEY (order_customer_map_id)
 ,
  CONSTRAINT map_order
    FOREIGN KEY (order_id)
    REFERENCES public.orders (order_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT map_customer
    FOREIGN KEY (customer_id)
    REFERENCES public.customers (customer_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.order_customers_map_seq RESTART WITH 1;

CREATE INDEX map_order_idx ON public.order_customers_map (order_id ASC);
CREATE INDEX map_customer_idx ON public.order_customers_map (customer_id ASC);


-- -----------------------------------------------------
-- Table `public`.`plans`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.plans ;

CREATE SEQUENCE public.plans_seq;

CREATE TABLE public.plans (
  plan_id INT NOT NULL DEFAULT NEXTVAL ('public.plans_seq'),
  price TIMESTAMP(0) NOT NULL,
  cicle VARCHAR(100) NOT NULL,
  description VARCHAR(255) NOT NULL,
  PRIMARY KEY (plan_id))
;

ALTER SEQUENCE public.plans_seq RESTART WITH 1;


-- -----------------------------------------------------
-- Table `public`.`subscriptions`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.subscriptions ;

CREATE SEQUENCE public.subscriptions_seq;

CREATE TABLE public.subscriptions (
  subscription_id INT NOT NULL DEFAULT NEXTVAL ('public.subscriptions_seq'),
  status_id INT NOT NULL,
  client_id INT NOT NULL,
  plan_id INT NOT NULL,
  next_renewal TIMESTAMP(0) NULL,
  last_payment_date TIMESTAMP(0) NULL,
  payment_amount DECIMAL(2) NULL,
  date_created TIMESTAMP(0) NOT NULL DEFAULT now(),
  date_modified TIMESTAMP(0) NULL,
  PRIMARY KEY (subscription_id)
 ,
  CONSTRAINT subscription_plan
    FOREIGN KEY (plan_id)
    REFERENCES public.plans (plan_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT subscription_client
    FOREIGN KEY (client_id)
    REFERENCES public.clients (client_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT subscription_status
    FOREIGN KEY (status_id)
    REFERENCES public.statuses (status_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.subscriptions_seq RESTART WITH 1;

CREATE INDEX subscription_plan_idx ON public.subscriptions (plan_id ASC);
CREATE INDEX subscription_client_idx ON public.subscriptions (client_id ASC);
CREATE INDEX subscription_status_idx ON public.subscriptions (status_id ASC);


-- -----------------------------------------------------
-- Table `public`.`pickup_settings`
-- -----------------------------------------------------
-- DROP TABLE IF EXISTS public.pickup_settings ;

CREATE SEQUENCE public.pickup_settings_seq;

CREATE TABLE public.pickup_settings (
  pickup_id INT NOT NULL,
  address VARCHAR(255) NULL,
  addtional_comment VARCHAR(255) NULL,
  pickup_availability TEXT NULL,
  client_setting_id INT NOT NULL,
  PRIMARY KEY (pickup_id)
 ,
  CONSTRAINT pickup_settings
    FOREIGN KEY (client_setting_id)
    REFERENCES public.client_settings (client_setting_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
;

ALTER SEQUENCE public.pickup_settings_seq RESTART WITH 1;

CREATE INDEX pickup_settings_idx ON public.pickup_settings (client_setting_id ASC);


/* SET SQL_MODE=@OLD_SQL_MODE; */
/* SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS; */
/* SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS; */

-- -----------------------------------------------------
-- Data for table `public`.`roles`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO public.roles (role_id, name) VALUES (1, 'admin');
INSERT INTO public.roles (role_id, name) VALUES (2, 'member');
INSERT INTO public.roles (role_id, name) VALUES (3, 'customer');

COMMIT;


-- -----------------------------------------------------
-- Data for table `public`.`statuses`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO public.statuses (status_id, name) VALUES (1, 'PENDING');
INSERT INTO public.statuses (status_id, name) VALUES (2, 'ACCEPTED');
INSERT INTO public.statuses (status_id, name) VALUES (3, 'DELIVERED');
INSERT INTO public.statuses (status_id, name) VALUES (4, 'PAID');
INSERT INTO public.statuses (status_id, name) VALUES (5, 'CANCELLED');
INSERT INTO public.statuses (status_id, name) VALUES (6, 'PAST_DUE');
INSERT INTO public.statuses (status_id, name) VALUES (7, 'AMENDED');
INSERT INTO public.statuses (status_id, name) VALUES (8, 'CHECK_REQUIRED');
INSERT INTO public.statuses (status_id, name) VALUES (9, 'ACTIVE');
INSERT INTO public.statuses (status_id, name) VALUES (10, 'SUSPENDED');

COMMIT;


-- -----------------------------------------------------
-- Data for table `public`.`payment_methods`
-- -----------------------------------------------------
START TRANSACTION;
INSERT INTO public.payment_methods (payment_method_id, name) VALUES (1, 'cash');
INSERT INTO public.payment_methods (payment_method_id, name) VALUES (2, 'credit_card');
INSERT INTO public.payment_methods (payment_method_id, name) VALUES (3, 'cash+credit_card');
COMMIT;


-- FUNCTION: public.update_last_modified()
-- DROP FUNCTION public.update_last_modified();

CREATE FUNCTION public.update_last_date_modified()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
BEGIN
NEW.date_modified = now();
RETURN NEW;
END;
$BODY$;

ALTER FUNCTION public.update_last_modified()
    OWNER TO webapp_catalog;


CREATE TRIGGER clients_BEFORE_UPDATE BEFORE UPDATE ON clients FOR EACH ROW
EXECUTE PROCEDURE public.update_last_date_modified();

CREATE TRIGGER users_BEFORE_UPDATE BEFORE UPDATE ON users FOR EACH ROW
EXECUTE PROCEDURE public.update_last_date_modified();

CREATE TRIGGER orders_BEFORE_UPDATE BEFORE UPDATE ON orders FOR EACH ROW
EXECUTE PROCEDURE public.update_last_date_modified();

CREATE TRIGGER delivery_orders_BEFORE_UPDATE BEFORE UPDATE ON delivery_orders FOR EACH ROW
EXECUTE PROCEDURE public.update_last_date_modified();

CREATE TRIGGER subscriptions_BEFORE_UPDATE BEFORE UPDATE ON subscriptions FOR EACH ROW
EXECUTE PROCEDURE public.update_last_date_modified();
